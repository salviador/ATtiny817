
PWM_Led.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00803e00  00803e00  0000020c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000198  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000002  00803e00  00803e00  0000020c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000020c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000023c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000158  00000000  00000000  00000278  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002551  00000000  00000000  000003d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001b4f  00000000  00000000  00002921  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000009ef  00000000  00000000  00004470  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001e0  00000000  00000000  00004e60  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000010e3  00000000  00000000  00005040  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000117  00000000  00000000  00006123  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000d8  00000000  00000000  0000623a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	19 c0       	rjmp	.+50     	; 0x34 <__ctors_end>
   2:	2a c0       	rjmp	.+84     	; 0x58 <__bad_interrupt>
   4:	29 c0       	rjmp	.+82     	; 0x58 <__bad_interrupt>
   6:	28 c0       	rjmp	.+80     	; 0x58 <__bad_interrupt>
   8:	27 c0       	rjmp	.+78     	; 0x58 <__bad_interrupt>
   a:	26 c0       	rjmp	.+76     	; 0x58 <__bad_interrupt>
   c:	25 c0       	rjmp	.+74     	; 0x58 <__bad_interrupt>
   e:	24 c0       	rjmp	.+72     	; 0x58 <__bad_interrupt>
  10:	23 c0       	rjmp	.+70     	; 0x58 <__bad_interrupt>
  12:	22 c0       	rjmp	.+68     	; 0x58 <__bad_interrupt>
  14:	21 c0       	rjmp	.+66     	; 0x58 <__bad_interrupt>
  16:	20 c0       	rjmp	.+64     	; 0x58 <__bad_interrupt>
  18:	1f c0       	rjmp	.+62     	; 0x58 <__bad_interrupt>
  1a:	a6 c0       	rjmp	.+332    	; 0x168 <__vector_13>
  1c:	1d c0       	rjmp	.+58     	; 0x58 <__bad_interrupt>
  1e:	1c c0       	rjmp	.+56     	; 0x58 <__bad_interrupt>
  20:	1b c0       	rjmp	.+54     	; 0x58 <__bad_interrupt>
  22:	1a c0       	rjmp	.+52     	; 0x58 <__bad_interrupt>
  24:	19 c0       	rjmp	.+50     	; 0x58 <__bad_interrupt>
  26:	18 c0       	rjmp	.+48     	; 0x58 <__bad_interrupt>
  28:	17 c0       	rjmp	.+46     	; 0x58 <__bad_interrupt>
  2a:	16 c0       	rjmp	.+44     	; 0x58 <__bad_interrupt>
  2c:	15 c0       	rjmp	.+42     	; 0x58 <__bad_interrupt>
  2e:	14 c0       	rjmp	.+40     	; 0x58 <__bad_interrupt>
  30:	13 c0       	rjmp	.+38     	; 0x58 <__bad_interrupt>
  32:	12 c0       	rjmp	.+36     	; 0x58 <__bad_interrupt>

00000034 <__ctors_end>:
  34:	11 24       	eor	r1, r1
  36:	1f be       	out	0x3f, r1	; 63
  38:	cf ef       	ldi	r28, 0xFF	; 255
  3a:	cd bf       	out	0x3d, r28	; 61
  3c:	df e3       	ldi	r29, 0x3F	; 63
  3e:	de bf       	out	0x3e, r29	; 62

00000040 <__do_clear_bss>:
  40:	2e e3       	ldi	r18, 0x3E	; 62
  42:	a0 e0       	ldi	r26, 0x00	; 0
  44:	be e3       	ldi	r27, 0x3E	; 62
  46:	01 c0       	rjmp	.+2      	; 0x4a <.do_clear_bss_start>

00000048 <.do_clear_bss_loop>:
  48:	1d 92       	st	X+, r1

0000004a <.do_clear_bss_start>:
  4a:	a2 30       	cpi	r26, 0x02	; 2
  4c:	b2 07       	cpc	r27, r18
  4e:	e1 f7       	brne	.-8      	; 0x48 <.do_clear_bss_loop>
  50:	0e 94 31 00 	call	0x62	; 0x62 <main>
  54:	0c 94 ca 00 	jmp	0x194	; 0x194 <_exit>

00000058 <__bad_interrupt>:
  58:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000005c <atmel_start_init>:
/**
 * Initializes MCU, drivers and middleware in the project
**/
void atmel_start_init(void)
{
	system_init();
  5c:	0e 94 83 00 	call	0x106	; 0x106 <system_init>
  60:	08 95       	ret

00000062 <main>:
int main(void)
{


	/* Initializes MCU, drivers and middleware */
	atmel_start_init();
  62:	0e 94 2e 00 	call	0x5c	; 0x5c <atmel_start_init>


	
	// Enable pin output
	PWM_0_enable_output_ch0();
  66:	0e 94 9c 00 	call	0x138	; 0x138 <PWM_0_enable_output_ch0>

	// Set channel 0 duty cycle value register value to 0x3f
	PWM_0_load_duty_cycle_ch0(5);
  6a:	85 e0       	ldi	r24, 0x05	; 5
  6c:	0e 94 a8 00 	call	0x150	; 0x150 <PWM_0_load_duty_cycle_ch0>

	// Set counter register value to 0
	PWM_0_load_counter(0);
  70:	80 e0       	ldi	r24, 0x00	; 0
  72:	0e 94 a2 00 	call	0x144	; 0x144 <PWM_0_load_counter>
	//PORTMUX.CTRLD = 0;
	//PORTC.DIR = 0b1;


	while (1) {
		for(i=0;i<255;i++){
  76:	10 92 01 3e 	sts	0x3E01, r1	; 0x803e01 <i>
  7a:	80 91 01 3e 	lds	r24, 0x3E01	; 0x803e01 <i>
  7e:	8f 3f       	cpi	r24, 0xFF	; 255
  80:	d1 f3       	breq	.-12     	; 0x76 <main+0x14>
			PWM_0_load_duty_cycle_ch0(i);
  82:	80 91 01 3e 	lds	r24, 0x3E01	; 0x803e01 <i>
  86:	0e 94 a8 00 	call	0x150	; 0x150 <PWM_0_load_duty_cycle_ch0>
			PWM_0_load_counter(255);
  8a:	8f ef       	ldi	r24, 0xFF	; 255
  8c:	0e 94 a2 00 	call	0x144	; 0x144 <PWM_0_load_counter>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  90:	82 ec       	ldi	r24, 0xC2	; 194
  92:	92 ea       	ldi	r25, 0xA2	; 162
  94:	01 97       	sbiw	r24, 0x01	; 1
  96:	f1 f7       	brne	.-4      	; 0x94 <main+0x32>
  98:	00 c0       	rjmp	.+0      	; 0x9a <main+0x38>
	//PORTMUX.CTRLD = 0;
	//PORTC.DIR = 0b1;


	while (1) {
		for(i=0;i<255;i++){
  9a:	80 91 01 3e 	lds	r24, 0x3E01	; 0x803e01 <i>
  9e:	8f 5f       	subi	r24, 0xFF	; 255
  a0:	80 93 01 3e 	sts	0x3E01, r24	; 0x803e01 <i>
  a4:	80 91 01 3e 	lds	r24, 0x3E01	; 0x803e01 <i>
  a8:	8f 3f       	cpi	r24, 0xFF	; 255
  aa:	59 f7       	brne	.-42     	; 0x82 <main+0x20>
  ac:	e4 cf       	rjmp	.-56     	; 0x76 <main+0x14>

000000ae <BOD_init>:
	//		 | BOD_VLMCFG_ABOVE_gc; /* Interrupt when supply goes above VLM level */

	// BOD.VLMCTRLA = BOD_VLMLVL_5ABOVE_gc; /* VLM threshold 5% above BOD level */

	return 0;
}
  ae:	80 e0       	ldi	r24, 0x00	; 0
  b0:	08 95       	ret

000000b2 <CLKCTRL_init>:
	//		 | 0 << CLKCTRL_CLKOUT_bp /* System clock out: disabled */);

	// ccp_write_io((void*)&(CLKCTRL.MCLKLOCK),0 << CLKCTRL_LOCKEN_bp /* lock enable: disabled */);

	return 0;
}
  b2:	80 e0       	ldi	r24, 0x00	; 0
  b4:	08 95       	ret

000000b6 <CPUINT_init>:
	// CPUINT.LVL0PRI = 0 << CPUINT_LVL0PRI_gp; /* Interrupt Level Priority: 0 */

	// CPUINT.LVL1VEC = 0 << CPUINT_LVL1VEC_gp; /* Interrupt Vector with High Priority: 0 */

	return 0;
}
  b6:	80 e0       	ldi	r24, 0x00	; 0
  b8:	08 95       	ret

000000ba <mcu_init>:
#ifdef __cplusplus
extern "C" {
#endif

void mcu_init(void)
{
  ba:	e0 e1       	ldi	r30, 0x10	; 16
  bc:	f4 e0       	ldi	r31, 0x04	; 4
	 * peripheral if used */

	/* Set all pins to low power mode */

	for (uint8_t i = 0; i < 8; i++) {
		*((uint8_t *)&PORTA + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
  be:	80 81       	ld	r24, Z
  c0:	88 60       	ori	r24, 0x08	; 8
  c2:	81 93       	st	Z+, r24
	 * disables all peripherals to save power. Driver shall enable
	 * peripheral if used */

	/* Set all pins to low power mode */

	for (uint8_t i = 0; i < 8; i++) {
  c4:	e8 31       	cpi	r30, 0x18	; 24
  c6:	84 e0       	ldi	r24, 0x04	; 4
  c8:	f8 07       	cpc	r31, r24
  ca:	c9 f7       	brne	.-14     	; 0xbe <mcu_init+0x4>
  cc:	e0 e3       	ldi	r30, 0x30	; 48
  ce:	f4 e0       	ldi	r31, 0x04	; 4
		*((uint8_t *)&PORTA + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
		*((uint8_t *)&PORTB + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
  d0:	80 81       	ld	r24, Z
  d2:	88 60       	ori	r24, 0x08	; 8
  d4:	81 93       	st	Z+, r24

	for (uint8_t i = 0; i < 8; i++) {
		*((uint8_t *)&PORTA + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
  d6:	e8 33       	cpi	r30, 0x38	; 56
  d8:	84 e0       	ldi	r24, 0x04	; 4
  da:	f8 07       	cpc	r31, r24
  dc:	c9 f7       	brne	.-14     	; 0xd0 <mcu_init+0x16>
  de:	e0 e5       	ldi	r30, 0x50	; 80
  e0:	f4 e0       	ldi	r31, 0x04	; 4
		*((uint8_t *)&PORTB + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
		*((uint8_t *)&PORTC + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
  e2:	80 81       	ld	r24, Z
  e4:	88 60       	ori	r24, 0x08	; 8
  e6:	81 93       	st	Z+, r24

	for (uint8_t i = 0; i < 8; i++) {
		*((uint8_t *)&PORTB + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
  e8:	e8 35       	cpi	r30, 0x58	; 88
  ea:	84 e0       	ldi	r24, 0x04	; 4
  ec:	f8 07       	cpc	r31, r24
  ee:	c9 f7       	brne	.-14     	; 0xe2 <mcu_init+0x28>
		*((uint8_t *)&PORTC + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}
}
  f0:	08 95       	ret

000000f2 <PWM_0_initialization>:
	switch (dir) {
	case PORT_DIR_IN:
		VPORTC.DIR &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		VPORTC.DIR |= (1 << pin);
  f2:	40 9a       	sbi	0x08, 0	; 8
static inline void PORTC_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTC.OUT |= (1 << pin);
	} else {
		VPORTC.OUT &= ~(1 << pin);
  f4:	48 98       	cbi	0x09, 0	; 9
	    // <false"> Low
	    // <true"> High
	    false);

	/* set the alternate pin mux */
	PORTMUX.CTRLD |= PORTMUX_TCB0_bm;
  f6:	e0 e0       	ldi	r30, 0x00	; 0
  f8:	f2 e0       	ldi	r31, 0x02	; 2
  fa:	83 81       	ldd	r24, Z+3	; 0x03
  fc:	81 60       	ori	r24, 0x01	; 1
  fe:	83 83       	std	Z+3, r24	; 0x03

	PWM_0_init();
 100:	0e 94 90 00 	call	0x120	; 0x120 <PWM_0_init>
 104:	08 95       	ret

00000106 <system_init>:
}

void system_init()
{
	mcu_init();
 106:	0e 94 5d 00 	call	0xba	; 0xba <mcu_init>

	CLKCTRL_init();
 10a:	0e 94 59 00 	call	0xb2	; 0xb2 <CLKCTRL_init>

	PWM_0_initialization();
 10e:	0e 94 79 00 	call	0xf2	; 0xf2 <PWM_0_initialization>

	CPUINT_init();
 112:	0e 94 5b 00 	call	0xb6	; 0xb6 <CPUINT_init>

	SLPCTRL_init();
 116:	0e 94 c8 00 	call	0x190	; 0x190 <SLPCTRL_init>

	BOD_init();
 11a:	0e 94 57 00 	call	0xae	; 0xae <BOD_init>
 11e:	08 95       	ret

00000120 <PWM_0_init>:
	TCB0.CTRLA |= TCB_ENABLE_bm;
}

void PWM_0_register_callback(pwm_irq_cb_t f)
{
	PWM_0_cb = f;
 120:	e0 e4       	ldi	r30, 0x40	; 64
 122:	fa e0       	ldi	r31, 0x0A	; 10
 124:	8f ef       	ldi	r24, 0xFF	; 255
 126:	84 87       	std	Z+12, r24	; 0x0c
 128:	84 e6       	ldi	r24, 0x64	; 100
 12a:	85 87       	std	Z+13, r24	; 0x0d
 12c:	87 e1       	ldi	r24, 0x17	; 23
 12e:	81 83       	std	Z+1, r24	; 0x01
 130:	81 e0       	ldi	r24, 0x01	; 1
 132:	80 83       	st	Z, r24
 134:	80 e0       	ldi	r24, 0x00	; 0
 136:	08 95       	ret

00000138 <PWM_0_enable_output_ch0>:
 138:	e0 e4       	ldi	r30, 0x40	; 64
 13a:	fa e0       	ldi	r31, 0x0A	; 10
 13c:	80 81       	ld	r24, Z
 13e:	81 60       	ori	r24, 0x01	; 1
 140:	80 83       	st	Z, r24
 142:	08 95       	ret

00000144 <PWM_0_load_counter>:
 144:	90 e0       	ldi	r25, 0x00	; 0
 146:	80 93 4a 0a 	sts	0x0A4A, r24	; 0x800a4a <__TEXT_REGION_LENGTH__+0x700a4a>
 14a:	90 93 4b 0a 	sts	0x0A4B, r25	; 0x800a4b <__TEXT_REGION_LENGTH__+0x700a4b>
 14e:	08 95       	ret

00000150 <PWM_0_load_duty_cycle_ch0>:
 150:	e0 e4       	ldi	r30, 0x40	; 64
 152:	fa e0       	ldi	r31, 0x0A	; 10
 154:	90 81       	ld	r25, Z
 156:	9e 7f       	andi	r25, 0xFE	; 254
 158:	90 83       	st	Z, r25
 15a:	85 87       	std	Z+13, r24	; 0x0d
 15c:	12 86       	std	Z+10, r1	; 0x0a
 15e:	13 86       	std	Z+11, r1	; 0x0b
 160:	80 81       	ld	r24, Z
 162:	81 60       	ori	r24, 0x01	; 1
 164:	80 83       	st	Z, r24
 166:	08 95       	ret

00000168 <__vector_13>:
}

ISR(TCB0_INT_vect)
{
 168:	1f 92       	push	r1
 16a:	0f 92       	push	r0
 16c:	0f b6       	in	r0, 0x3f	; 63
 16e:	0f 92       	push	r0
 170:	11 24       	eor	r1, r1
 172:	8f 93       	push	r24
	static volatile uint8_t callback_count = 0;

	// Clear the interrupt flag
	TCB0.INTFLAGS = TCB_CAPT_bm;
 174:	81 e0       	ldi	r24, 0x01	; 1
 176:	80 93 46 0a 	sts	0x0A46, r24	; 0x800a46 <__TEXT_REGION_LENGTH__+0x700a46>

	// callback function - called every 0 passes
	if ((++callback_count >= PWM_0_INTERRUPT_CB_RATE) && (PWM_0_INTERRUPT_CB_RATE != 0)) {
 17a:	80 91 00 3e 	lds	r24, 0x3E00	; 0x803e00 <_edata>
 17e:	8f 5f       	subi	r24, 0xFF	; 255
 180:	80 93 00 3e 	sts	0x3E00, r24	; 0x803e00 <_edata>
		if (PWM_0_cb != NULL) {
			PWM_0_cb();
		}
	}
}
 184:	8f 91       	pop	r24
 186:	0f 90       	pop	r0
 188:	0f be       	out	0x3f, r0	; 63
 18a:	0f 90       	pop	r0
 18c:	1f 90       	pop	r1
 18e:	18 95       	reti

00000190 <SLPCTRL_init>:

	// SLPCTRL.CTRLA = 0 << SLPCTRL_SEN_bp /* Sleep enable: disabled */
	//		 | SLPCTRL_SMODE_IDLE_gc; /* Idle mode */

	return 0;
}
 190:	80 e0       	ldi	r24, 0x00	; 0
 192:	08 95       	ret

00000194 <_exit>:
 194:	f8 94       	cli

00000196 <__stop_program>:
 196:	ff cf       	rjmp	.-2      	; 0x196 <__stop_program>
